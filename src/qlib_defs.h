/************************************************************************************************************
* @internal
* @remark     Winbond Electronics Corporation - Confidential
* @copyright  Copyright (c) 2019 by Winbond Electronics Corporation . All rights reserved
* @endinternal
*
* @file       qlib_defs.h
* @brief      This file contains Software Definitions Macros
*
* ### project qlib
*
************************************************************************************************************/
#ifndef __QLIB_DEFS_H__
#define __QLIB_DEFS_H__

#ifdef __cplusplus
extern "C" {
#endif

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                             ERROR CHECKING                                              */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
#if !defined(__QLIB_H__) && !defined(SWIG)
#error "This internal header file should not be included directly. Please include `qlib.h' instead"
#endif
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                            DEPENDENCY CHECK                                             */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
#ifndef __QLIB_PLATFORM_INCLUDED__
#error "This file should not be included directly. Use qlib.h"
#endif

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                                 INCLUDES                                                */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
#ifdef __KERNEL__
#include <linux/string.h>
#include <linux/types.h>
#include <linux /vmalloc.h>
#else
#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#endif
#ifdef _WIN32
#include <Windows.h>
#endif
#include "qlib_platform.h"

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                        GENERIC TYPES DEFINITIONS                                        */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/

#ifndef QLIB_CUSTOM_TYPES

/*---------------------------------------------------------------------------------------------------------*/
/* Native unsigned integer                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
//typedef unsigned int UINT;

/*---------------------------------------------------------------------------------------------------------*/
/* Native signed integer                                                                                   */
/*---------------------------------------------------------------------------------------------------------*/
//typedef int INT;

/*---------------------------------------------------------------------------------------------------------*/
/* unsigned 64bit integer                                                                                  */
/*---------------------------------------------------------------------------------------------------------*/
typedef uint64_t U64;

/*---------------------------------------------------------------------------------------------------------*/
/* signed 64bit integer                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
//typedef int64_t I64;

/*---------------------------------------------------------------------------------------------------------*/
/* unsigned 32bit integer                                                                                  */
/*---------------------------------------------------------------------------------------------------------*/
typedef uint32_t U32;

/*---------------------------------------------------------------------------------------------------------*/
/* signed 32bit integer                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
typedef int32_t I32;

/*---------------------------------------------------------------------------------------------------------*/
/* unsigned 16bit integer                                                                                  */
/*---------------------------------------------------------------------------------------------------------*/
typedef uint16_t U16;

/*---------------------------------------------------------------------------------------------------------*/
/* signed 16bit integer                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
//typedef int16_t I16;

/*---------------------------------------------------------------------------------------------------------*/
/* unsigned 8bit integer                                                                                   */
/*---------------------------------------------------------------------------------------------------------*/
typedef uint8_t U8;

/*---------------------------------------------------------------------------------------------------------*/
/* signed 8bit integer                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
//typedef int8_t I8;

/*---------------------------------------------------------------------------------------------------------*/
/* unsigned pointer size integer                                                                           */
/*---------------------------------------------------------------------------------------------------------*/
typedef uintptr_t UPTR;

/*---------------------------------------------------------------------------------------------------------*/
/* Boolean type                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
#if !defined(_WIN32) && !defined(BOOL)
#define BOOL int
#endif // !defined(_WIN32) && !defined(BOOL)


#endif // QLIB_CUSTOM_TYPES

/*---------------------------------------------------------------------------------------------------------*/
/* 64bit array                                                                                             */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _64BIT[2];

/*---------------------------------------------------------------------------------------------------------*/
/* 128bit array                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _128BIT[4];

/*---------------------------------------------------------------------------------------------------------*/
/* 192bit array                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _192BIT[6];

/* 256bit array                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _256BIT[8]; //Lint matches a pattern reserved to the compiler

/*---------------------------------------------------------------------------------------------------------*/
/* 320bit array                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _320BIT[10];

/*---------------------------------------------------------------------------------------------------------*/
/* 512bit array                                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
typedef U32 _512BIT[16]; //Lint matches a pattern reserved to the compiler

/*---------------------------------------------------------------------------------------------------------*/
/* TRUE/FALSE                                                                                              */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef TRUE
#define TRUE 1
#endif

#ifndef FALSE
#define FALSE 0
#endif

/*---------------------------------------------------------------------------------------------------------*/
/* NULL                                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef NULL
#define NULL ((void*)0)
#endif

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                      TYPE MAXIMUM / MINIMUM VALUES                                      */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------*/
/* U8                                                                                                      */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_U8 (0xFFu)

/*---------------------------------------------------------------------------------------------------------*/
/* I8                                                                                                      */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_I8 ((I8)0x7F)
#define MIN_I8 ((I8)0x80)

/*---------------------------------------------------------------------------------------------------------*/
/* U16                                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_U16 ((U16)0xFFFF)

/*---------------------------------------------------------------------------------------------------------*/
/* I16                                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_I16 ((I16)0x7FFF)
#define MIN_I16 ((I16)0x8000)

/*---------------------------------------------------------------------------------------------------------*/
/* U32                                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_U32 ((U32)0xFFFFFFFFUL)

/*---------------------------------------------------------------------------------------------------------*/
/* I32                                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_I32 ((I32)0x7FFFFFFFUL)
#define MIN_I32 ((I32)0x80000000UL)

/*---------------------------------------------------------------------------------------------------------*/
/* U64                                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_U64 ((U64)0xFFFFFFFFFFFFFFFFULL)

/*---------------------------------------------------------------------------------------------------------*/
/* I64                                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_I64 ((I64)0x7FFFFFFFFFFFFFFFULL)
#define MIN_I64 ((I64)0x8000000000000000ULL)

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                            MEASUREMENT UNITS                                            */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------*/
/* Capacity (basic unit : byte)                                                                            */
/*---------------------------------------------------------------------------------------------------------*/
#define _1B_   1UL
#define _2B_   (2UL * _1B_)
#define _4B_   (2UL * _2B_)
#define _8B_   (2UL * _4B_)
#define _16B_  (2UL * _8B_)
#define _32B_  (2UL * _16B_)
#define _64B_  (2UL * _32B_)
#define _128B_ (2UL * _64B_)
#define _256B_ (2UL * _128B_)
#define _512B_ (2UL * _256B_)

#define _1KB_   (1024UL * _1B_)
#define _2KB_   (2UL * _1KB_)
#define _4KB_   (2UL * _2KB_)
#define _8KB_   (2UL * _4KB_)
#define _16KB_  (2UL * _8KB_)
#define _32KB_  (2UL * _16KB_)
#define _64KB_  (2UL * _32KB_)
#define _128KB_ (2UL * _64KB_)
#define _256KB_ (2UL * _128KB_)
#define _512KB_ (2UL * _256KB_)

#define _1MB_   (1024UL * _1KB_)
#define _2MB_   (2UL * _1MB_)
#define _4MB_   (2UL * _2MB_)
#define _8MB_   (2UL * _4MB_)
#define _16MB_  (2UL * _8MB_)
#define _32MB_  (2UL * _16MB_)
#define _64MB_  (2UL * _32MB_)
#define _128MB_ (2UL * _64MB_)
#define _256MB_ (2UL * _128MB_)
#define _512MB_ (2UL * _256MB_)

#define _1GB_   (1024UL * _1MB_)
#define _2GB_   (2UL * _1GB_)
#define _4GB_   (2UL * _2GB_)
#define _8GB_   (2UL * _4GB_)
#define _16GB_  (2UL * _8GB_)
#define _32GB_  (2UL * _16GB_)
#define _64GB_  (2UL * _32GB_)
#define _128GB_ (2UL * _64GB_)
#define _256GB_ (2UL * _128GB_)
#define _512GB_ (2UL * _256GB_)

/*---------------------------------------------------------------------------------------------------------*/
/* Frequency (basic unit : hertz)                                                                          */
/*---------------------------------------------------------------------------------------------------------*/
#define _1Hz_  1UL
#define _1KHz_ (1000UL * _1Hz_)
#define _1MHz_ (1000UL * _1KHz_)
#define _1GHz_ (1000UL * _1MHz_)

/*---------------------------------------------------------------------------------------------------------*/
/* Time                                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
#define _1USEC_IN_NSEC_ 1000UL

#define _1MSEC_IN_USEC_ 1000UL
#define _1MSEC_IN_NSEC_ ((_1MSEC_IN_USEC_) * (_1USEC_IN_NSEC_))

#define _1SEC_IN_MSEC_ 1000UL
#define _1SEC_IN_USEC_ ((_1SEC_IN_MSEC_) * (_1MSEC_IN_USEC_))
#define _1SEC_IN_NSEC_ ((_1SEC_IN_MSEC_) * (_1MSEC_IN_NSEC_))

#define _1MIN_IN_SEC_  60UL
#define _1MIN_IN_MSEC_ ((_1MIN_IN_SEC_) * (_1SEC_IN_MSEC_))
#define _1MIN_IN_USEC_ ((_1MIN_IN_SEC_) * (_1SEC_IN_USEC_))
#define _1MIN_IN_NSEC_ ((_1MIN_IN_SEC_) * (_1SEC_IN_NSEC_))

#define _1HOUR_IN_MIN_  60UL
#define _1HOUR_IN_SEC_  ((_1HOUR_IN_MIN_) * (_1MIN_IN_SEC_))
#define _1HOUR_IN_MSEC_ ((_1HOUR_IN_MIN_) * (_1MIN_IN_MSEC_))
#define _1HOUR_IN_USEC_ ((_1HOUR_IN_MIN_) * (_1MIN_IN_USEC_))
#define _1HOUR_IN_NSEC_ ((_1HOUR_IN_MIN_) * (_1MIN_IN_NSEC_))

#define _1DAY_IN_HOURS_ 24UL
#define _1DAY_IN_MIN_   ((_1DAY_IN_HOURS_) * (_1HOUR_IN_MIN_))
#define _1DAY_IN_SEC_   ((_1DAY_IN_HOURS_) * (_1HOUR_IN_SEC_))
#define _1DAY_IN_MSEC_  ((_1DAY_IN_HOURS_) * (_1HOUR_IN_MSEC_))
#define _1DAY_IN_USEC_  ((_1DAY_IN_HOURS_) * (_1HOUR_IN_USEC_))
#define _1DAY_IN_NSEC_  ((_1DAY_IN_HOURS_) * (_1HOUR_IN_NSEC_))

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                           ACCESS MACROS                                                 */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------*/
/* Allow to define run-time field                                                                          */
/*---------------------------------------------------------------------------------------------------------*/
#define FIELD(bit_offset, bit_size) bit_offset, bit_size

/*---------------------------------------------------------------------------------------------------------*/
/* Get field of a register / variable                                                                      */
/*---------------------------------------------------------------------------------------------------------*/
// clang-format off
#define READ_VAR_FIELD(var, field)                                                                          \
   _GET_FIELD_VAL(var, _GET_FIELD_SIZE(field), _GET_FIELD_POS(field))
// clang-format on

/*---------------------------------------------------------------------------------------------------------*/
/* Set field of a register / variable                                                                      */
/*---------------------------------------------------------------------------------------------------------*/
// clang-format off
#define SET_VAR_FIELD_8(var, field, value)                                                                    \
    ((var) = (U8)_SET_FIELD_VAL(var, _GET_FIELD_SIZE(field), _GET_FIELD_POS(field), value))
// clang-format on

/*---------------------------------------------------------------------------------------------------------*/
/* Set field of a register / variable                                                                      */
/*---------------------------------------------------------------------------------------------------------*/
// clang-format off
#define SET_VAR_FIELD_16(var, field, value)                                                                    \
    ((var) = (U16)_SET_FIELD_VAL(var, _GET_FIELD_SIZE(field), _GET_FIELD_POS(field), value))
// clang-format on

/*---------------------------------------------------------------------------------------------------------*/
/* Set field of a register / variable                                                                      */
/*---------------------------------------------------------------------------------------------------------*/
// clang-format off
#define SET_VAR_FIELD_32(var, field, value)                                                                    \
    ((var) = (U32)_SET_FIELD_VAL(var, _GET_FIELD_SIZE(field), _GET_FIELD_POS(field), value))
// clang-format on

/*---------------------------------------------------------------------------------------------------------*/
/* Set field of a register / variable                                                                      */
/*---------------------------------------------------------------------------------------------------------*/
// clang-format off
#define SET_VAR_FIELD_64(var, field, value)                                                                    \
    ((var) = (U64)_SET_FIELD_VAL(var, _GET_FIELD_SIZE(field), _GET_FIELD_POS(field), value))
// clang-format on

/*---------------------------------------------------------------------------------------------------------*/
/* Variable bit operation macros                                                                           */
/*---------------------------------------------------------------------------------------------------------*/
#define READ_VAR_BIT(var, nb) _GET_BIT_VAL(var, nb)

// clang-format off
#define SET_VAR_BIT(var, nb)                                                                                \
    ((var) =_SET_BIT_VAL(var, nb))
// clang-format on

// clang-format off
#define CLEAR_VAR_BIT(var, nb)                                                                              \
    ((var) =_CLEAR_BIT_VAL(var, nb))
// clang-format on

#define SET_VAR_BIT_TYPE(type, var, nb) ((var) = _SET_BIT_VAL_TYPE(type, var, nb))

// clang-format off
#define CLEAR_VAR_BIT_TYPE(type, var, nb)                                                                              \
    ((var) =_CLEAR_BIT_VAL_TYPE(type, var, nb))
// clang-format on
#define WRITE_VAR_BIT_TYPE(type, var, nb, val) \
    {                                          \
        if (val)                               \
        {                                      \
            SET_VAR_BIT_TYPE(type, var, nb);   \
        }                                      \
        else                                   \
        {                                      \
            CLEAR_VAR_BIT_TYPE(type, var, nb); \
        }                                      \
    }

#define WRITE_VAR_BIT_64(var, nb, val) WRITE_VAR_BIT_TYPE(U64, var, nb, val)
#define WRITE_VAR_BIT_32(var, nb, val) WRITE_VAR_BIT_TYPE(U32, var, nb, val)
#define WRITE_VAR_BIT_16(var, nb, val) WRITE_VAR_BIT_TYPE(U16, var, nb, val)
#define WRITE_VAR_BIT_8(var, nb, val)  WRITE_VAR_BIT_TYPE(U8, var, nb, val)

/*---------------------------------------------------------------------------------------------------------*/
/* Field value                                                                                             */
/*---------------------------------------------------------------------------------------------------------*/
#define MAX_FIELD_VAL(field) _MASK_FIELD(_GET_FIELD_SIZE(field), 0u)

/*---------------------------------------------------------------------------------------------------------*/
/* Mask field                                                                                              */
/*---------------------------------------------------------------------------------------------------------*/
#define MASK_FIELD(field) _MASK_FIELD(_GET_FIELD_SIZE(field), _GET_FIELD_POS(field))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level getters                                                                                       */
/*---------------------------------------------------------------------------------------------------------*/
#define _CASTING_FROM(size)        _CASTING_FROM2(U, size)
#define _CASTING_FROM2(type, size) type##size
#define _GET_FIELD(pos, size)      pos, size
#define _GET_FIELD_POS(pos, size)  pos
#define _GET_FIELD_SIZE(pos, size) size

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level get field value                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#define _GET_FIELD_VAL(val, field_size, field_pos) ((((val) >> (field_pos))) & ((((uintmax_t)1U) << (field_size)) - 1U))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level set field value                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
// clang-format off
#define _SET_FIELD_VAL(val, field_size, field_pos, value)                                         \
   (((field_size) == 1u) ?                                                                        \
        (((value) == 1u) ?                                                                        \
            _SET_BIT_VAL(val, field_pos)                                                          \
        :                                                                                         \
            _CLEAR_BIT_VAL(val, field_pos))                                                       \
    :                                                                                             \
        (   _SET_MASK(  _BUILD_FIELD_VAL_SIZE(value, field_size, field_pos),                      \
                        _CLEAR_FIELD_VAL(val, field_size, field_pos)))                            \
    )
// clang-format on

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level get bit value                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#define _GET_BIT_VAL(val, bit_num) _READ_MASK((val) >> (bit_num), 1u)

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level set bit value                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#define _SET_BIT_VAL(val, bit_num) _SET_MASK(val, (((uintmax_t)1u) << (bit_num)))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level clear bit value                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#define _CLEAR_BIT_VAL(val, bit_num) _CLEAR_MASK(val, ((uintmax_t)1u) << (bit_num))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level set bit value                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#define _SET_BIT_VAL_TYPE(type, val, bit_num) _SET_MASK(val, (((type)1u) << (bit_num)))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level clear bit value                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#define _CLEAR_BIT_VAL_TYPE(type, val, bit_num) _CLEAR_MASK(val, ((type)1u) << (bit_num))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level field mask                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
#define _BUILD_FIELD_MASK(field_size, field_pos) ((((((uintmax_t)1u) << (field_size)) - ((uintmax_t)1u))) << (field_pos))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level clear mask field value                                                                        */
/*---------------------------------------------------------------------------------------------------------*/
#define _CLEAR_FIELD_VAL(val, field_size, field_pos) _CLEAR_MASK(val, _BUILD_FIELD_MASK(field_size, field_pos))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level build field value with size                                                                   */
/*---------------------------------------------------------------------------------------------------------*/
#define _BUILD_FIELD_VAL_SIZE(val, field_size, field_pos) \
    ((((((uintmax_t)1u) << (field_size)) - ((uintmax_t)1u)) & (val)) << (field_pos))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level set mask                                                                                      */
/*---------------------------------------------------------------------------------------------------------*/
#define _SET_MASK(val, bit_mask) ((val) | (bit_mask))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level read mask                                                                                     */
/*---------------------------------------------------------------------------------------------------------*/
#define _READ_MASK(val, bit_mask) ((val) & (bit_mask))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level clear mask                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
#define _CLEAR_MASK(val, bit_mask) ((val) & (~(bit_mask)))

/*---------------------------------------------------------------------------------------------------------*/
/* Low-level mask field                                                                                    */
/*---------------------------------------------------------------------------------------------------------*/
// clang-format off

#define _MASK_FIELD(field_size, field_pos)                                                                  \
    ((((field_size)+(field_pos)) <= 8u)  ? (U8)(_BUILD_FIELD_MASK(field_size, field_pos))     :             \
    ((((field_size)+(field_pos)) <= 16u) ? (U16)(_BUILD_FIELD_MASK(field_size, field_pos))    :             \
    ((((field_size)+(field_pos)) <= 32u) ? (U32)(_BUILD_FIELD_MASK(field_size, field_pos))    :             \
                                          (U64)(_BUILD_FIELD_MASK(field_size, field_pos)))))
                                          
//#define _MASK_FIELD(field_size, field_pos) _BUILD_FIELD_MASK(field_size, field_pos)

// clang-format on
/*---------------------------------------------------------------------------------------------------------*/
/* Low-level build field value                                                                             */
/*---------------------------------------------------------------------------------------------------------*/
// clang-format off
#define _BUILD_FIELD_VAL(field_size, field_pos, val)                                                        \
    (_BUILD_FIELD_VAL_SIZE(val, field_size, field_pos))
// clang-format on

/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/
/*                                           UTILITY MACROS                                                */
/*---------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------*/
/*                                          MACRO EXPANSION                                                */
/*---------------------------------------------------------------------------------------------------------*/
#define EVAL(x) x

/*---------------------------------------------------------------------------------------------------------*/
/*                                            LOOP UNROLL                                                  */
/*---------------------------------------------------------------------------------------------------------*/
#define REPEAT_1(f, ...) EVAL(f(0, __VA_ARGS__))
#define REPEAT_2(f, ...)      \
    REPEAT_1(f, __VA_ARGS__); \
    EVAL(f((1), __VA_ARGS__))
#define REPEAT_3(f, ...)      \
    REPEAT_2(f, __VA_ARGS__); \
    EVAL(f((2), __VA_ARGS__))
#define REPEAT_4(f, ...)      \
    REPEAT_3(f, __VA_ARGS__); \
    EVAL(f((3), __VA_ARGS__))
#define REPEAT_5(f, ...)      \
    REPEAT_4(f, __VA_ARGS__); \
    EVAL(f((4), __VA_ARGS__))
#define REPEAT_6(f, ...)      \
    REPEAT_5(f, __VA_ARGS__); \
    EVAL(f((5), __VA_ARGS__))
#define REPEAT_7(f, ...)      \
    REPEAT_6(f, __VA_ARGS__); \
    EVAL(f((6), __VA_ARGS__))
#define REPEAT_8(f, ...)      \
    REPEAT_7(f, __VA_ARGS__); \
    EVAL(f((7), __VA_ARGS__))
#define REPEAT_9(f, ...)      \
    REPEAT_8(f, __VA_ARGS__); \
    EVAL(f((8), __VA_ARGS__))
#define REPEAT_10(f, ...)     \
    REPEAT_9(f, __VA_ARGS__); \
    EVAL(f((9), __VA_ARGS__))
#define REPEAT_11(f, ...)      \
    REPEAT_10(f, __VA_ARGS__); \
    EVAL(f((10), __VA_ARGS__))
#define REPEAT_12(f, ...)      \
    REPEAT_11(f, __VA_ARGS__); \
    EVAL(f((11), __VA_ARGS__))
#define REPEAT_13(f, ...)      \
    REPEAT_12(f, __VA_ARGS__); \
    EVAL(f((12), __VA_ARGS__))
#define REPEAT_14(f, ...)      \
    REPEAT_13(f, __VA_ARGS__); \
    EVAL(f((13), __VA_ARGS__))
#define REPEAT_15(f, ...)      \
    REPEAT_14(f, __VA_ARGS__); \
    EVAL(f((14), __VA_ARGS__))
#define REPEAT_16(f, ...)      \
    REPEAT_15(f, __VA_ARGS__); \
    EVAL(f((15), __VA_ARGS__))

/*---------------------------------------------------------------------------------------------------------*/
/* Copy array entry by entry without loop, available for up to 16 entries                                  */
/*---------------------------------------------------------------------------------------------------------*/
#define ARRAY_COPY_ENTRY(i, dst, src)      ((dst)[i] = (src)[i])
#define ARRAY_COPY_INLINE(dst, src, count) REPEAT_##count(EVAL(ARRAY_COPY_ENTRY), (dst), (src))

/*---------------------------------------------------------------------------------------------------------*/
/* Write constant value to all array entries, entry by entry without loop, available for up to 16 entries  */
/*---------------------------------------------------------------------------------------------------------*/
#define ARRAY_SET_ENTRY(i, arr, v)      ((arr)[(i)] = (v))
#define ARRAY_SET_INLINE(arr, v, count) REPEAT_##count(EVAL(ARRAY_SET_ENTRY), (arr), (v))

/*---------------------------------------------------------------------------------------------------------*/
/*                                        TRIPLE DATA STRUCTURE                                            */
/*---------------------------------------------------------------------------------------------------------*/
#define GET_FIRST_FROM_TRIPLE(first, second, third)  first
#define GET_SECOND_FROM_TRIPLE(first, second, third) second
#define GET_THIRD_FROM_TRIPLE(first, second, third)  third

/*---------------------------------------------------------------------------------------------------------*/
/* Enum generation                                                                                         */
/*                                                                                                         */
/* These macros are useful for generation of enum and enum string pairs.                                   */
/* For example:                                                                                            */
/*                                                                                                         */
/* #define MY_FRUITS(ELEMENT)       \                                                                      */
/* {                                \                                                                      */
/*      ELEMENT(apple),             \                                                                      */
/*      ELEMENT(banana),            \                                                                      */
/*      ELEMENT(pineapple),         \                                                                      */
/* }                                                                                                       */
/*                                                                                                         */
/* typedef enum MY_FRUITS(GENERATE_ENUM)  fruit_enums;                                                     */
/* const char* fruit_strings[] = MY_FRUITS(GENERATE_STRING);                                               */
/*                                                                                                         */
/*                                                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define GENERATE_ENUM(ENUM)     ENUM
#define GENERATE_STRING(STRING) #STRING

/*---------------------------------------------------------------------------------------------------------*/
/*                                       PARAMETER RANGE VALIDATION                                        */
/*---------------------------------------------------------------------------------------------------------*/
//#define ENUM_IN_RANGE(e, prefix) ((((e) > (prefix##_FIRST)) && ((e) < (prefix##_LAST))))
#define ENUM_IN_RANGE_FIRST(e, prefix) ((e) > (prefix##_FIRST))
#define ENUM_IN_RANGE_LAST(e, prefix)  (((e) < (prefix##_LAST)))
#define ENUM_IN_RANGE(e, prefix)       (ENUM_IN_RANGE_FIRST(e, prefix) && ENUM_IN_RANGE_LAST(e, prefix))

/*---------------------------------------------------------------------------------------------------------*/
/*                                              MAKE STRING                                                */
/*---------------------------------------------------------------------------------------------------------*/
#define _STRINGX(x) #x
#define STRINGX(x)  _STRINGX(x)

/*---------------------------------------------------------------------------------------------------------*/
/*                                           Assertion macros                                              */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef CORE_ASSERT
#ifdef _WIN32
#define CORE_ASSERT() DebugBreak()
#elif defined(__MCUXPRESSO)
#define CORE_ASSERT()  \
    {                  \
        asm("BKPT 0"); \
    }
#else
#define CORE_ASSERT() \
    {                 \
        for (;;)      \
            ;         \
    }
#endif
#endif

#ifndef ASSERT
#define ASSERT(cond)
#endif

/*---------------------------------------------------------------------------------------------------------*/
/* Round (down) the number (val) with the (n) boundary. (n) must be power of 2                             */
/*---------------------------------------------------------------------------------------------------------*/
#define ROUND_DOWN(val, n) ((val) & (~((n)-1u)))

/*---------------------------------------------------------------------------------------------------------*/
/* Check if address is aligned to 32 bit                                                                   */
/*---------------------------------------------------------------------------------------------------------*/
#define ADDRESS_ALIGNED32(p) (0u == ((U8)((UPTR)p) & 0x3u))

/*---------------------------------------------------------------------------------------------------------*/
/* Check if parameter is aligned to selected value (val should be a power of 2)                            */
/*---------------------------------------------------------------------------------------------------------*/
#define ALIGNED_TO(x, val) (((x) & (~((val)-1u))) == (x))

/*---------------------------------------------------------------------------------------------------------*/
/* Bits <-> Bytes conversion                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#define BITS_TO_BYTES(bits)  ((bits) / 8u)
#define BYTES_TO_BITS(bytes) ((bytes)*8u)

/*---------------------------------------------------------------------------------------------------------*/
/* calculate maximum value                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef MAX
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#endif

/*---------------------------------------------------------------------------------------------------------*/
/* calculate minimum value                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef MIN
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#endif

/*---------------------------------------------------------------------------------------------------------*/
/* calculate absolute value                                                                                */
/*---------------------------------------------------------------------------------------------------------*/
#define ABS(a) ((a) > (0u) ? (a) : -(a))

/*---------------------------------------------------------------------------------------------------------*/
/* calculate modulus                                                                                       */
/*---------------------------------------------------------------------------------------------------------*/
#define MOD(a, b) ((a) - (((a) / (b)) * (b)))

/*---------------------------------------------------------------------------------------------------------*/
/* Log2 of a number to return the number of bits needed to represent it                                    */
/*---------------------------------------------------------------------------------------------------------*/
#define _LOG_1(n)  (((n) >= (0x2UL)) ? 1UL : 0UL)
#define _LOG_2(n)  (((n) >= (0x4UL)) ? (2UL + _LOG_1((n) >> 2UL)) : _LOG_1(n))
#define _LOG_4(n)  (((n) >= (0x10UL)) ? (4UL + _LOG_2((n) >> 4UL)) : _LOG_2(n))
#define _LOG_8(n)  (((n) >= (0x100UL)) ? (8UL + _LOG_4((n) >> 8UL)) : _LOG_4(n))
#define _LOG_16(n) (((n) >= (0x10000UL)) ? (16UL + _LOG_8((n) >> 16UL)) : (_LOG_8(n)))
#define LOG2(n)    ((((n) & ((n)-1UL)) == 0UL) ? (_LOG_16(n)) : (_LOG_16(n) + 1UL))

/*---------------------------------------------------------------------------------------------------------*/
/* Division                                                                                                */
/*---------------------------------------------------------------------------------------------------------*/
#define DIV_CEIL(a, b) (((a) + (b)-1u) / (b)) // Might overflow on a+b - use with caution

/************************************************************************************************************
 * Division by 1000, for 32 bit resolution
************************************************************************************************************/
#define DIV_BY_1000_32BIT(n) \
    (((n) >> 10) + ((n) >> 16) + ((n) >> 17) + ((n) >> 21) + ((n) >> 24) + ((n) >> 27) + ((n) >> 28) + ((n) >> 30) + ((n) >> 31))

/*---------------------------------------------------------------------------------------------------------*/
/* Calculate size of statically declared array                                                             */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef ARRAY_SIZE
#define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))
#endif

/*---------------------------------------------------------------------------------------------------------*/
/* Generate 64bit from bytes                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#define MAKE_64_BIT(byte0, byte1, byte2, byte3, byte4, byte5, byte6, byte7) \
    (((U64)MAKE_32_BIT(byte0, byte1, byte2, byte3)) | (((U64)MAKE_32_BIT(byte4, byte5, byte6, byte7)) << 32))

/*---------------------------------------------------------------------------------------------------------*/
/* Generate 32bit from bytes                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#define MAKE_32_BIT(byte0, byte1, byte2, byte3) \
    ((((U32)(byte0)) << 0u) | (((U32)(byte1)) << 8u) | (((U32)(byte2)) << 16u) | (((U32)(byte3)) << 24u))
/*---------------------------------------------------------------------------------------------------------*/
/* Generate 16bit from bytes                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#define MAKE_16_BIT(byte0, byte1) ((((U16)(byte0)) << 0u) | (((U16)(byte1)) << 8u)) //Lint need to figure out how to solve it
//#define MAKE_16_BIT(byte0, byte1) (byte0 + byte1)
/*---------------------------------------------------------------------------------------------------------*/
/* Reverse order of bytes of 64bit                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define REVERSE_BYTES_64_BIT(val)                   \
    MAKE_64_BIT(((val)&0xFF00000000000000UL) >> 56, \
                ((val)&0x00FF000000000000UL) >> 48, \
                ((val)&0x0000FF0000000000UL) >> 40, \
                ((val)&0x000000FF00000000UL) >> 32, \
                ((val)&0x00000000FF000000UL) >> 24, \
                ((val)&0x0000000000FF0000UL) >> 16, \
                ((val)&0x000000000000FF00UL) >> 8,  \
                (val)&0x00000000000000FFUL)

/*---------------------------------------------------------------------------------------------------------*/
/* Reverse order of bytes of 32bit                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define REVERSE_BYTES_32_BIT(val) \
    MAKE_32_BIT(((val)&0xFF000000U) >> 24u, ((val)&0x00FF0000U) >> 16u, ((val)&0x0000FF00U) >> 8u, (val)&0x000000FFU)

/*---------------------------------------------------------------------------------------------------------*/
/* Reverse order of bytes of 16bit                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#define REVERSE_BYTES_16_BIT(val) MAKE_16_BIT(((val)&0xFF00u) >> 8u, (val)&0x00FFu)

/*---------------------------------------------------------------------------------------------------------*/
/* Extract bytes                                                                                           */
/*---------------------------------------------------------------------------------------------------------*/
#define BYTE(x, n) (((const U8*)&(x))[(n)])

/*---------------------------------------------------------------------------------------------------------*/
/* BOOLEAN                                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#define BOOLEAN_TO_INT(b) ((TRUE == b) ? 1u : 0u)
#define INT_TO_BOOLEAN(i) (((i) != 0u) ? TRUE : FALSE)

/*---------------------------------------------------------------------------------------------------------*/
/* TOUCH unused parameters                                                                                 */
/*---------------------------------------------------------------------------------------------------------*/
#define TOUCH(x) ((void)(x))

/*---------------------------------------------------------------------------------------------------------*/
/* Variable packing                                                                                        */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef PACKED
#ifdef _MSC_VER
#define PACKED_START __pragma(pack(push, 1u))
#define PACKED
#define PACKED_END __pragma(pack(pop))
#else
#define PACKED_START
#define PACKED __attribute__((packed))
#define PACKED_END
#endif
#endif //PACKED

/*---------------------------------------------------------------------------------------------------------*/
/* Inline functions                                                                                        */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef _INLINE_
#ifdef _MSC_VER
#define _INLINE_ __forceinline
#elif defined(__GNUC__)
#define _INLINE_ inline __attribute__((__always_inline__))
#elif defined(__CLANG__)
#if __has_attribute(__always_inline__)
#define _INLINE_ inline __attribute__((__always_inline__))
#else
#define _INLINE_ inline
#endif
#elif defined __ARMCC_VERSION
#define _INLINE_ __inline
#else
#define _INLINE_ inline
#endif
#endif //_INLINE_

/*---------------------------------------------------------------------------------------------------------*/
/* Dynamic Memory Allocation                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
#ifdef __KERNEL__
#define MALLOC(size) vmalloc(size)
#define _FREE(ptr)   vfree(ptr)
#else
#define MALLOC(size) malloc(size)
#define _FREE(ptr)   free(ptr)
#endif // __KERNEL__

#define FREE(ptr)          \
    {                      \
        if ((ptr) != NULL) \
        {                  \
            _FREE(ptr);    \
            (ptr) = NULL;  \
            TOUCH(ptr);    \
        }                  \
    }

#ifdef __cplusplus
}
#endif

#endif // __QLIB_DEFS_H__
